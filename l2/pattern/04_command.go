package pattern

import "fmt"

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
	Команда - это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавть их как
	аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.

	Применимость:
	1. Когда вы хотите параметризовать объекты выполняемым действием.
	Команда превращает операции в объекты. А объекты можно передавать, хранить и взаимозаменять внутри других объектов.

	2. Когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети.
	Как и любые другие объекты, команды можно серилизовать, то есть превратить в строку, чтобы потом сохранить в файл
	или базу данных.

	3. Когда нужна операция отмены.
	Главная вещь, которая нужна, чтобы иметь возможность отмены операций, это сохранение истории. Паттерн "Команда"
	является самым популярным, чтобы это сделать. История команд выглядит как стек, в который попадают все выполненые
	команды.
*/

// Конкретный получатель.
type tv struct {
	isRunning bool
}

func (t *tv) on() {
	t.isRunning = true
	fmt.Println("Turning tv on")
}

func (t *tv) off() {
	t.isRunning = false
	fmt.Println("Turning tv off")
}

// Интерфейс команды
type command interface {
	execute()
}

// Интерфейс получателя.
type device interface {
	on()
	off()
}

// Конкретная команда включения тв.
type onCommand struct {
	device device
}

func (c *onCommand) execute() {
	c.device.on()
}

// Конкретная команда выключения тв.
type offCommand struct {
	device device
}

func (c *offCommand) execute() {
	c.device.off()
}

// Отправитель
type button struct {
	command command
}

func (b *button) press() {
	b.command.execute()
}

// func main() {
// 	// Создаём объект которым будем управлять (Получатель).
// 	tv := &tv{}
// 	// Создаём команды управления. В данном случае включение и выключение тв.
// 	onCommand := &onCommand{device: tv}
// 	offCommand := &offCommand{device: tv}

// 	// Создаём кнопки управления и передаём в них команды управления.
// 	onButton := &button{command: onCommand}
// 	offButton := &button{command: offCommand}

// 	// Для выполнения команды включения тв, необходимо воспользовать методом и нажать на кнопку.
// 	onButton.press()
// 	// Для выполнения команды выключения тв, так же необходимо воспользовать методом и нажать на кнопку.
// 	offButton.press()
// }
