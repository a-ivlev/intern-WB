package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

// anagramSearch принимает ссылку на слайс с исходными словами. Возвращает карту с ключом из суммы рун слова из множества,
// значение список слов с одинаковой суммой рун это и есть список анаграмм.
func anagramSearch(inputWords *[]string) *map[string]*[]string {
	// создаём map для сортировки словаря.
	sortMap := make(map[int32][]string)
	// итерируемся по словарю.
	for _, w := range *inputWords {
		// переводим каждое слово в нижний регистр.
		word := strings.ToLower(w)
		// получаем хэш каждого слова, это сумма значений рун всех букв, входящих в состав этого слова.
		hash := hashWord(word)
		// в сортировочной мапе хэш слова выступает ключом, у анаграмм хэш будет одинаковый.
		sortMap[hash] = append(sortMap[hash], word)
	}

	// создаём итоговую map.
	anagrams := make(map[string]*[]string)
	// итерируемся по sortMap и добавляем в итоговую map элементы.
	for _, slice := range sortMap {
		// Переменные, объявленные в инициализирующем операторе, переиспользуются в каждом цикле.
		// Когда программа запущена, существует только один объект или кусок памяти для переменной slice,
		// а не создается новый для каждого цикла. Этот объект и принимает новое значение на каждой итерации.
		slice := slice
		// проверяем условие, множества из одного элемента не должны попасть в результат.
		if len(slice) > 1 {
			// формируем итоговую map, ключом первое встретившееся в словаре слово из множества,
			// значение - ссылка на массив, каждый элемент которого, слово из множества.
			anagrams[slice[0]] = &slice
			// сортируем массив по возрастанию.
			sort.Slice(slice, func(i, j int) bool { return slice[i] < slice[j] })
		}
	}
	return &anagrams
}

// hashWord переводит слово в руны, итерируется по ним и возвращает сумму всех рун входящих в слово.
// Что помогает найти анаграммы, так как у анаграмм сумма значений рун должна быть одинаковой.
func hashWord(s string) int32 {
	var hashRunes int32

	for _, elem := range s {
		hashRunes += elem
	}
	return hashRunes
}

func main() {
	words := &[]string{"Пятка", "слиток", "тяпка", "листок", "тряпка", "Свисток", "пятак", "столик"}
	fmt.Println("Словарь: ", *words)

	anagrams := anagramSearch(words)

	fmt.Println("Анаграммы:")
	for key, value := range *anagrams {
		fmt.Println(key, *value)
	}
}
